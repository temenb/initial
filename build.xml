<?xml version="1.0" encoding="UTF-8"?>
<project name="php-automate-build-ant" default="full-build">
    
    
    <property file="build/properties/common"/>
    <property file="build/properties/env.${environment}"/>
    
    <target name="deploy-remote">
        <echo message="Deploying remote" />
        <sshexec 
            host="${remote_host}" 
            username="${remote_username}"
            trust="true"
            keyfile="${remote_keyfile}"
            command="sh -c 'cd ${remote_dir} &amp;&amp; ant deploy'" />
    </target>

    <target name="deploy" depends="pull,composer,migrate">
        <echo message="Deploy latest" />
    </target>
    <target name="pull">
        <echo message="git pull" />
        <exec executable="git" failonerror="true">
            <arg value="pull"/>
        </exec>
    </target>
    
    <target name="migrate">
        <echo message="php artisan migrate" />
        <exec executable="docker" failonerror="true">
            <arg value="exec"/>
            <arg value="botan-php"/>
            <arg value="sh"/>
            <arg value="-c"/>
            <arg value="php artisan migrate"/>
        </exec>
    </target>
    
    <target name="docker-compose-composer" description="Install composer packages.">
        <echo message="docker-compose up composer-install" />
        <exec executable="docker-compose" failonerror="true">
            <arg value="up"/>
            <arg value="composer-install"/>
        </exec>
    </target>
    
    <target name="composer" description="Install composer packages.">
        <echo message="composer install" />
        <exec executable="composer" failonerror="true">
            <arg value="install"/>
            <arg value="--ignore-platform-reqs"/>
        </exec>
    </target>
    
    
    <!-- By default the tools are managed by Composer in ${basedir}/vendor/bin -->
    <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcs" value="${basedir}/vendor/bin/phpcs"/>
    <property name="phpmd" value="${basedir}/vendor/bin/phpmd"/>
    <property name="phpunit" value="${basedir}/vendor/bin/phpunit"/>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts.">
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="full-build" depends="prepare,static-analysis,phpunit,-check-failure"
            description="Perform static analysis, run tests, and generate project documentation.">
        <echo message="Built"/>
    </target>

    <target name="lint" unless="lint.done" description="Perform syntax check of PHP sourcecode files.">
        <apply executable="php" failonerror="true" taskname="lint">
            <arg value="-l"/>
            <fileset dir="${basedir}/app">
                <include name="**/*.php"/>
                <!-- modified/ -->
            </fileset>
            <fileset dir="${basedir}/tests">
                <include name="**/*.php"/>
                <!-- modified/ -->
            </fileset>
        </apply>
        <property name="lint.done" value="true"/>
    </target>

    <target name="pdepend" unless="pdepend.done" depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/app"/>
        </exec>
        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpcs" unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/app"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci" unless="phpcs.done" depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/app"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpmd" unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/app"/>
            <arg value="text"/>
            <arg path="${basedir}/build/phpmd.xml"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci" unless="phpmd.done" depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/app"/>
            <arg value="xml"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit.">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg path="tests"/>
            <arg value="--log-junit"/>
            <arg path="${basedir}/build/coverge/unitreport.xml"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/coverge/clover.xml"/>
            <env key="XDEBUG_MODE" value="coverage"/>
        </exec>
        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit-no-coverage" unless="phpunit.done" depends="prepare"
            description="Run unit tests with PHPUnit without generating code coverage reports.">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg path="tests"/>
            <arg value="--no-coverage"/>
        </exec>
        <property name="phpunit.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build.">
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="quick-build" depends="prepare,lint,phpunit-no-coverage"
            description="Perform lint check and run tests without generating code coverage reports.">
        <echo message="Built"/>
    </target>

    <target name="static-analysis" depends="lint,pdepend,phpmd-ci,phpcs-ci"
            description="Perform static analysis.">
        <echo message="Done"/>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
        <echo message="Checked failure"/>
    </target>

</project>