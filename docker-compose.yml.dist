version: '3'
services:
    pgsql:
        container_name: initialcode-postgres
        build: ./docker/containers/postgres
        ports:
            - '${FORWARD_DB_PORT:-5433}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - './vendor/laravel/sail/database/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
            - './docker/containers/postgres/data:/var/lib/postgresql/data'
            - './docker/containers/postgres/dumps:/dumps'
        networks:
            - initialcode
        healthcheck:
            test:
                - CMD
                - pg_isready
                - '-q'
                - '-d'
                - '${DB_DATABASE}'
                - '-U'
                - '${DB_USERNAME}'
            retries: 3
            timeout: 5s

    pgsql_phpunit:
        container_name: initialcode-postgres-phpunit
        build: ./docker/containers/postgres
        ports:
            - '${FORWARD_DB_PORT:-5434}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - './docker/containers/phpunit-postgres/data_phpunit:/var/lib/postgresql/data'
            - './docker/containers/phpunit-postgres/dumps:/dumps'
        networks:
            - initialcode
        healthcheck:
            test:
                - CMD
                - pg_isready
                - '-q'
                - '-d'
                - '${DB_DATABASE}'
                - '-U'
                - '${DB_USERNAME}'
            retries: 3
            timeout: 5s

    web:
        container_name: initialcode-web
        build: ./docker/containers/nginx
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./:/project
            - ./docker/containers/nginx/config/site.conf:/etc/nginx/conf.d/default.conf
            - ./docker/containers/nginx/logs:/etc/logs/nginx
        networks:
            - initialcode

    php:
        container_name: initialcode-php
        build: ./docker/containers/php
#        ports:
#            - "8000:8000"
        volumes:
            - ./:/project
            - ./docker/containers/php/config/php.ini:/usr/local/etc/php/conf.d/php.ini
        networks:
            - initialcode

    composer:
        container_name: initialcode-composer
        build: ./docker/containers/composer
        command: install --ignore-platform-reqs
#         command: update --ignore-platform-reqs
#        command: tail -f /etc/hosts
#        command: cat composer.json
#        command: composer require livewire/livewire
#        command: composer require laravel/jetstream --ignore-platform-reqs
        volumes:
            - ./:/app
        networks:
            - initialcode

    composer-install:
        build: ./docker/containers/composer
        command: install --ignore-platform-reqs
        volumes:
            - ./:/app
        networks:
            - initialcode

    npm:
        container_name: initialcode-npm
        build: ./docker/containers/npm
        working_dir: /app
#        command: npm i
#        command: sh -c "npm i && tail -f /etc/hosts"
#        command: npm install redis --save
#        command: npm install node-uuid --save
#        command: npm i @vitejs/plugin-react-refresh --force
        command: sh -c "npm i && npm run dev"
#        command: npm install babel-preset-react --save
#        ports:
#            - "80:80"
#            - "3000:3000"
#            - "5173:5173"
#            - "8000:8000"
        volumes:
            - ./:/app
            - ./docker/containers/npm/logs:/root/.npm/_logs/
        networks:
            - initialcode

networks:
    initialcode:
        driver: bridge
volumes:
    initialcode-pgsql:
        driver: local
